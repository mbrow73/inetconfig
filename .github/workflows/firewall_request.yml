name: üîí Process Firewall Requests

on:
  issues:
    types: [opened]

jobs:
  process:
    runs-on: ubuntu-latest
    # Only run on issues labeled "firewall-request"
    if: contains(github.event.issue.labels.*.name, 'firewall-request')

    steps:
      # 1. Checkout
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      # 2. Install Terraform CLI
      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      # 3. Parse the issue body into JSON fields (handles inline and two-line)
      - name: üìù Parse issue into JSON
        id: parse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const issue = context.payload.issue;
            if (!issue?.body) throw new Error("No issue body found");

            const lines = issue.body.split("\n").map(l => l.trim());
            const obj = {};

            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              if (!line.startsWith("üîπ")) continue;

              // Strip bullet
              const after = line.replace(/^üîπ\s*/, "");
              // Attempt inline split ("Key: value")
              let [rawKey, inlineVal] = after.split(/:\s*/, 2);
              rawKey = rawKey.replace(/:$/, "");  // drop trailing colon

              // Normalize key ‚Üí source_ip_s_or_cidr_s, etc.
              const key = rawKey
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, "_")
                .replace(/_+$/,"");

              // Determine value: prefer inlineVal, else next non-blank line
              let val = inlineVal?.trim();
              if (!val) {
                let j = i + 1;
                while (j < lines.length && lines[j] === "") j++;
                if (j >= lines.length) throw new Error(`No value provided for "${rawKey}"`);
                val = lines[j];
              }
              obj[key] = val;
            }

            return JSON.stringify(obj);

      # 4. Validate fields
      - name: ‚úÖ Validate request fields
        run: |
          python3 scripts/validate_firewall_request.py '${{ steps.parse.outputs.result }}'

      # 5. Inject new rule into tfvars
      - name: ‚úçÔ∏è Inject rule into tfvars
        run: |
          python3 scripts/add_firewall_rule.py '${{ steps.parse.outputs.result }}' e1inetpolicy.auto.tfvars.json

      # 6. Terraform format & validate
      - name: üßπ Terraform fmt & validate
        env:
          TF_IN_AUTOMATION: true
        run: |
          terraform init -backend=false
          terraform fmt -check -diff
          terraform validate

      # 7. Create a PR for NetSec review
      - name: üîÄ Create PR for NetSec review
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: firewall-req-${{ fromJson(steps.parse.outputs.result).request_id_reqid }}
          title: "[Firewall] ${{ fromJson(steps.parse.outputs.result).request_id_reqid }} ‚Äì ${{ fromJson(steps.parse.outputs.result).protocol }}/${{ fromJson(steps.parse.outputs.result).port_s }}"
          labels: firewall-rule,pending-review
          body: |
            Auto-generated firewall rule for **${{ fromJson(steps.parse.outputs.result).request_id_reqid }}**

            - **Source:** ${{ fromJson(steps.parse.outputs.result).source_ip_s_or_cidr_s }}
            - **Destination:** ${{ fromJson(steps.parse.outputs.result).destination_ip_s_or_cidr_s }}
            - **Port(s):** ${{ fromJson(steps.parse.outputs.result).port_s }}
            - **Protocol:** ${{ fromJson(steps.parse.outputs.result).protocol }}
            - **Direction:** ${{ fromJson(steps.parse.outputs.result).direction }}

            Closes #${{ github.event.issue.number }}

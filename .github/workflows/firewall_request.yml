name: üîí Process Firewall Requests

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues:   write
  pull-requests: write

jobs:
  process:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'firewall-request')

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: üìù Parse issue into JSON
        id: parse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const issue = context.payload.issue;
            if (!issue?.body) throw new Error("No issue body found");
            const lines = issue.body.split("\n").map(l => l.trim());
            const obj = {};
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              if (!line.startsWith("üîπ")) continue;
              const after = line.replace(/^üîπ\s*/, "");
              let [rawKey, inlineVal] = after.split(/:\s*/, 2);
              rawKey = rawKey.replace(/:$/, "");
              const key = rawKey
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, "_")
                .replace(/_+$/,"");
              let val = inlineVal?.trim();
              if (!val) {
                let j = i + 1;
                while (j < lines.length && lines[j] === "") j++;
                if (j >= lines.length) throw new Error(`No value provided for "${rawKey}"`);
                val = lines[j];
              }
              obj[key] = val;
            }
            return JSON.stringify(obj);

      - name: ‚úÖ Validate request fields
        id: validate
        continue-on-error: true
        run: |
          python3 scripts/validate_firewall_request.py '${{ steps.parse.outputs.result }}' 2>&1 | tee validation.log
          echo "::set-output name=exitcode::${PIPESTATUS[0]}"

      - name: üí¨ Comment on validation failure
        if: steps.validate.outputs.exitcode != '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const errors = require('fs').readFileSync('validation.log','utf8');
            await github.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number,
              body: `‚ö†Ô∏è **Validation failed** for your firewall request:\n\`\`\`\n${errors}\n\`\`\`\nPlease correct your input and re-open or comment when ready.`
            });

      # stop here if validation failed
      - name: üõë Halt on validation failure
        if: steps.validate.outputs.exitcode != '0'
        run: exit 1

      # ‚Ä¶ the rest of your success path (inject rule, terraform validate, PR) ‚Ä¶


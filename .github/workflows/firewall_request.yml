name: üîí Process Firewall Requests

concurrency:
  group: firewall-requests
  cancel-in-progress: false

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues:   write
  pull-requests: write

jobs:
  process:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'firewall-request')

    steps:
      # 1Ô∏è‚É£ Check out the repository
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2Ô∏è‚É£ Parse the Issue into JSON (and extract CARID + rules[])
      - name: üìù Parse issue into JSON (and CARID)
        id: parse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            // (your existing parsing logic, unchanged)
            // returns JSON.stringify({ carid, rules });

      # 3Ô∏è‚É£ Persist the parsed payload
      - name: üíæ Save parsed JSON
        run: echo '${{ steps.parse.outputs.result }}' > parsed.json

      # 4Ô∏è‚É£ Merge latest main so we can see all past priorities
      - name: üîÑ Merge latest main
        run: |
          git fetch origin main
          git merge origin/main --strategy-option theirs

      # 5Ô∏è‚É£ Run validation
      - name: ‚úÖ Run validation
        id: validate
        continue-on-error: true
        run: |
          set -o pipefail
          exit_code=0
          > validation.log
          tfvars_path="automation.auto.tfvars.json"
          while IFS= read -r rule; do
            python3 scripts/validate_firewall_request.py "$rule" "$tfvars_path" \
              || exit_code=1
          done < <(jq -c '.rules[]' parsed.json)
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        shell: bash

      # 6Ô∏è‚É£ Comment & close on validation failure
      - name: üí¨ Comment on validation failure
        if: steps.validate.outputs.exit_code != '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const errs = require('fs').readFileSync('validation.log','utf8');
            await github.rest.issues.createComment({ /* your existing body */ });

      - name: üõë Close Issue on validation failure
        if: steps.validate.outputs.exit_code != '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.update({ /* your existing close */ });

      - name: ‚è≠Ô∏è Skip remaining steps on validation error
        if: steps.validate.outputs.exit_code != '0'
        run: echo "Validation errors detected; skipping inject & PR."

      # 7Ô∏è‚É£ Build the PR body
      - name: ‚ú® Build PR body
        if: steps.validate.outputs.exit_code == '0'
        id: build_pr_body
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            // (your existing build-PR-body logic)

      # 8Ô∏è‚É£ Write a per-request JSON (assigning unique priorities)
      - name: ‚úçÔ∏è Assign priorities & write per-request JSON
        if: steps.validate.outputs.exit_code == '0'
        run: |
          python3 - << 'EOF'
          import json, glob
          from pathlib import Path

          # Load this request
          parsed = json.loads("""${{ steps.parse.outputs.result }}""")

          # Gather existing priorities from manual.tfvars and prior requests
          prios = set()
          try:
              man = json.load(open("manual.auto.tfvars.json"))
              for r in man.get("manual_firewall_rules", []):
                  prios.add(r.get("priority", 0))
          except FileNotFoundError:
              pass

          for fn in glob.glob("firewall_requests/*.json"):
              try:
                  data = json.load(open(fn))
                  for r in data.get("rules", []):
                      prios.add(r.get("priority", 0))
              except Exception:
                  continue

          # Start assigning at max + 1 (default baseline 1000)
          max_prio = max(prios) if prios else 1000

          # Build output object
          output = {"carid": parsed["carid"], "rules": []}
          for idx, rule in enumerate(parsed["rules"], start=1):
              max_prio += 1
              rule["priority"] = max_prio
              output["rules"].append(rule)

          # Write one JSON per request
          Path("firewall_requests").mkdir(exist_ok=True)
          reqid = parsed["rules"][0]["request_id_reqid"]
          fname = f"firewall_requests/{reqid}.json"
          with open(fname, "w") as f:
              json.dump(output, f, indent=2)
          print(f"Wrote {fname} with priorities {[r['priority'] for r in output['rules']]}")
          EOF

      # 9Ô∏è‚É£ (Optional) Terraform fmt & validate‚Äîyour Terraform now reads from firewall_requests/
      - name: üßπ Terraform fmt & validate
        if: steps.validate.outputs.exit_code == '0'
        env:
          TF_IN_AUTOMATION: true
        run: |
          terraform init -backend=false
          terraform fmt -recursive
          terraform validate

      # üîü Create Pull Request for NetSec review
      - name: üîÄ Create PR for NetSec review
        id: create_pr
        if: steps.validate.outputs.exit_code == '0'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: firewall-req-${{ fromJson(steps.parse.outputs.result).rules[0].request_id_reqid }}
          title: "[Firewall] ${{ fromJson(steps.parse.outputs.result).rules[0].request_id_reqid }} ‚Äì ${{ fromJson(steps.parse.outputs.result).rules[0].protocol }}/${{ fromJson(steps.parse.outputs.result).rules[0].port_s }}"
          labels: firewall-rule,pending-review
          body: ${{ steps.build_pr_body.outputs.result }}

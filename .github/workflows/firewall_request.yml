name: üîí Process Firewall Requests

concurrency:
  group: firewall-requests
  cancel-in-progress: false

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'firewall-request')

    steps:
      # 1Ô∏è‚É£ Check out the repository
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2Ô∏è‚É£ Parse Issue into JSON (CARID, REQID, and rules[])
      - name: üìù Parse issue into JSON (and CARID)
        id: parse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const body = context.payload.issue.body;
            if (!body) throw new Error("No issue body found");

            // Extract Request ID
            const reqMatch = body.match(/REQ\d+/);
            if (!reqMatch) throw new Error("Missing Request ID (REQID)");
            const request_id_reqid = reqMatch[0].trim();

            // Extract CARID
            const carMatch = body.match(/CARID\s*[:\-]\s*(\S+)/i);
            if (!carMatch) throw new Error("Missing CARID");
            const carid = carMatch[1].trim();

            // Parse rules
            const lines = body.split(/\r?\n/);
            const rules = [];
            let current = null;
            for (const raw of lines) {
              // Start new rule on lines like 'Rule 1' or '#### Rule 2'
              if (/^\s*(?:#+\s*)?Rule\s*\d+/i.test(raw)) {
                if (current) rules.push(current);
                current = { request_id_reqid };
                continue;
              }
              if (!current) continue;

              const m = raw.trim().match(/^üîπ\s*(.+?)\s*:\s*(.+)$/);
              if (m) {
                const key = m[1]
                  .toLowerCase()
                  .replace(/[^a-z0-9]+/g, "_")
                  .replace(/_+$/, "");
                const val = m[2].trim().replace(/^`|`$/g, "");
                current[key] = val;
              }
            }
            if (current) rules.push(current);
            if (rules.length === 0) throw new Error("No rules found in issue body");

            return JSON.stringify({ carid, request_id_reqid, rules });

      # 3Ô∏è‚É£ Persist parsed payload
      - name: üíæ Save parsed JSON
        run: echo '${{ steps.parse.outputs.result }}' > parsed.json

      # 4Ô∏è‚É£ Merge latest main so we see all existing priorities
      - name: üîÑ Merge latest main
        run: |
          git fetch origin main
          git merge origin/main --strategy-option theirs

      # 5Ô∏è‚É£ Run validation
      - name: ‚úÖ Run validation
        id: validate
        continue-on-error: true
        shell: bash
        run: |
          set -o pipefail
          exit_code=0
          > validation.log
          tfvars_path="automation.auto.tfvars.json"
          while IFS= read -r rule; do
            python3 scripts/validate_firewall_request.py "$rule" "$tfvars_path" || exit_code=1
          done < <(jq -c '.rules[]' parsed.json)
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

      # 6Ô∏è‚É£ Comment & close on validation failure
      - name: üí¨ Comment on validation failure
        if: steps.validate.outputs.exit_code != '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const errs = require('fs').readFileSync('validation.log','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `‚ö†Ô∏è **Validation failed**:\n\`\`\`\n${errs}\n\`\`\`\nPlease fix and reopen.`
            });

      - name: üõë Close Issue on validation failure
        if: steps.validate.outputs.exit_code != '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed'
            });

      - name: ‚è≠Ô∏è Skip on validation failure
        if: steps.validate.outputs.exit_code != '0'
        run: echo "Skipping inject & PR steps."

      # 7Ô∏è‚É£ Build the PR body
      - name: ‚ú® Build PR body
        if: steps.validate.outputs.exit_code == '0'
        id: build_pr_body
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const p = JSON.parse(`\${{ steps.parse.outputs.result }}`);
            const lines = p.rules.map((r,i) =>
              `- Rule ${i+1}: ${r.source_ip_s_or_cidr_s} ‚Üí ${r.destination_ip_s_or_cidr_s} on ${r.protocol}/${r.port_s}\n  Justification: ${r.business_justification}`
            ).join("\n");
            return `Auto-generated firewall requests **${p.request_id_reqid}**:\n\n${lines}\n\nCloses #${{ github.event.issue.number }}`;

      # 8Ô∏è‚É£ Assign priorities & write per-request JSON
      - name: ‚úçÔ∏è Assign priorities & write per-request JSON
        if: steps.validate.outputs.exit_code == '0'
        run: |
          mkdir -p firewall_requests
          python3 - << 'EOF'
          import json, glob
          from pathlib import Path

          parsed = json.load(open("parsed.json"))

          prios = set()
          try:
              man = json.load(open("manual.auto.tfvars.json"))
              for r in man.get("manual_firewall_rules", []):
                  prios.add(r.get("priority", 0))
          except FileNotFoundError:
              pass
          for fn in glob.glob("firewall_requests/*.json"):
              try:
                  data = json.load(open(fn))
                  for r in data.get("rules", []):
                      prios.add(r.get("priority", 0))
              except:
                  continue

          start = max(prios) if prios else 1000

          out = {"carid": parsed["carid"], "request_id_reqid": parsed["request_id_reqid"], "rules": []}
          for rule in parsed["rules"]:
              start += 1
              rule["priority"] = start
              out["rules"].append(rule)

          fn = f"firewall_requests/{parsed['request_id_reqid']}.json"
          Path(fn).write_text(json.dumps(out, indent=2))
          print(f"Wrote {fn} with priorities {[r['priority'] for r in out['rules']]}" )
          EOF

      # 9Ô∏è‚É£ Optional: Terraform fmt & validate
      - name: üßπ Terraform fmt & validate
        if: steps.validate.outputs.exit_code == '0'
        env:
          TF_IN_AUTOMATION: true
        run: |
          terraform init -backend=false
          terraform fmt -recursive
          terraform validate

      # üîü Create PR for NetSec review
      - name: üîÄ Create PR for NetSec review
        id: create_pr
        if: steps.validate.outputs.exit_code == '0'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: firewall-req-${{ fromJson(steps.parse.outputs.result).request_id_reqid }}
          title: "[Firewall] ${{ fromJson(steps.parse.outputs.result).request_id_reqid }} ‚Äì ${{ fromJson(steps.parse.outputs.result).rules[0].protocol }}/${{ fromJson(steps.parse.outputs.result).rules[0].port_s }}"
          labels: firewall-rule,pending-review
          body: ${{ steps.build_pr_body.outputs.result }}
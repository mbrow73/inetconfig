name: 🔒 Process Firewall Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues:   write
  pull-requests: write

jobs:
  process:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'firewall-request')

    steps:
      # 1) Checkout
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2) Parse the issue body
      - name: 📝 Parse issue into JSON
        id: parse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const issue = context.payload.issue;
            if (!issue?.body) throw new Error("No issue body found");
            const lines = issue.body.split("\n").map(l => l.trim());
            const obj = {};
            for (let i = 0; i < lines.length; i++) {
              if (!lines[i].startsWith("🔹")) continue;
              const after = lines[i].replace(/^🔹\s*/, "");
              let [rawKey, inlineVal] = after.split(/:\s*/, 2);
              rawKey = rawKey.replace(/:$/, "");
              const key = rawKey
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, "_")
                .replace(/_+$/,"");
              let val = inlineVal?.trim() || "";
              if (!val) {
                let j = i + 1;
                while (j < lines.length && !lines[j]) j++;
                if (j >= lines.length) throw new Error(`No value for "${rawKey}"`);
                val = lines[j];
              }
              obj[key] = val;
            }
            return JSON.stringify(obj);

      # 3) Save parsed JSON to a file
      - name: 💾 Save parsed JSON
        run: echo '${{ steps.parse.outputs.result }}' > parsed.json

      # 4) Validate fields (won't stop the job)
      - name: ✅ Run validation
        id: validate
        continue-on-error: true
        run: |
          python3 scripts/validate_firewall_request.py "$(cat parsed.json)" 2>&1 | tee validation.log
        shell: bash

      # 5) If validation failed, comment on the issue
      - name: 💬 Comment on validation failure
        if: steps.validate.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const errs = require('fs').readFileSync('validation.log','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `⚠️ **Validation failed** for your firewall request:\n\`\`\`\n${errs}\n\`\`\`\nPlease fix your issue and re-open when ready.`
            });

      # 6) Everything below only runs if validation succeeded
      - name: ⚙️ Setup Terraform
        if: steps.validate.outcome == 'success'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: ✍️ Inject rule into tfvars
        if: steps.validate.outcome == 'success'
        run: |
          python3 scripts/add_firewall_rule.py "$(cat parsed.json)" e1inetpolicy.auto.tfvars.json

      - name: 🧹 Terraform fmt & validate
        if: steps.validate.outcome == 'success'
        env:
          TF_IN_AUTOMATION: true
        run: |
          terraform init -backend=false
          terraform fmt -recursive
          terraform validate

      - name: 🗑️ Cleanup Terraform runtime files
        if: steps.validate.outcome == 'success'
        run: |
          rm -rf .terraform .terraform.lock.hcl

      - name: 🔀 Create PR for NetSec review
        if: steps.validate.outcome == 'success'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: firewall-req-${{ fromJson(steps.parse.outputs.result).request_id_reqid }}
          title: "[Firewall] ${{ fromJson(steps.parse.outputs.result).request_id_reqid }} – ${{ fromJson(steps.parse.outputs.result).protocol }}/${{ fromJson(steps.parse.outputs.result).port_s }}"
          labels: firewall-rule,pending-review
          body: |
            Auto-generated firewall rule for **${{ fromJson(steps.parse.outputs.result).request_id_reqid }}**

            - **Source:** ${{ fromJson(steps.parse.outputs.result).source_ip_s_or_cidr_s }}
            - **Destination:** ${{ fromJson(steps.parse.outputs.result).destination_ip_s_or_cidr_s }}
            - **Port(s):** ${{ fromJson(steps.parse.outputs.result).port_s }}
            - **Protocol:** ${{ fromJson(steps.parse.outputs.result).protocol }}
            - **Direction:** ${{ fromJson(steps.parse.outputs.result).direction }}

            Closes #${{ github.event.issue.number }}

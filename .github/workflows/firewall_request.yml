name: Firewall Rule Request Automation

on:
  issues:
    types: [opened, edited, reopened]  # Trigger on new issues and when issues are edited:contentReference[oaicite:7]{index=7}

permissions:
  issues: write   # allow commenting on issues (and reading issue content)

jobs:
  process-firewall-request:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Validate issue content
        id: validate
        run: |
          # Run the validation script on the issue body
          # (Modify this path or command as needed for your repo)
          set +e
          OUTPUT=$(python scripts/validate_firewall_request.py)
          EXIT_CODE=$?
          set -e
          if [ $EXIT_CODE -ne 0 ]; then
            echo "$OUTPUT" > validation_error.txt   # save error message for comment
          fi
          # Print output (for logging)
          echo "$OUTPUT"
          exit $EXIT_CODE
        continue-on-error: true

      - name: Comment on issue if validation fails
        # Runs only if the validation step failed
        if: ${{ failure() && steps.validate.outcome == 'failure' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          echo "❌ **Validation Failed**. See details below:" > comment.md
          echo '```' >> comment.md
          cat validation_error.txt >> comment.md
          echo '```' >> comment.md
          # Post the comment using GitHub CLI
          gh issue comment ${{ github.event.issue.number }} --body-file comment.md
        # The above uses a temp file (comment.md) to preserve formatting of the message

      - name: Terraform Init
        if: ${{ steps.validate.outcome == 'success' }}
        run: terraform init

      - name: Terraform Validate
        if: ${{ steps.validate.outcome == 'success' }}
        run: terraform validate

      # (Optional) Generate/update Terraform config from issue if needed
      # - name: Generate TF config from issue
      #   if: ${{ steps.validate.outcome == 'success' }}
      #   run: python scripts/generate_tf_from_issue.py

      - name: Create Pull Request for Firewall Rule
        if: ${{ steps.validate.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Example using GitHub CLI to create a PR
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b "firewall-rule-${{ github.event.issue.number }}"
          # (Assume changes (e.g., Terraform files) are already made at this point)
          git add .
          git commit -m "Add firewall rule for issue #${{ github.event.issue.number }}"
          git push -u origin "firewall-rule-${{ github.event.issue.number }}"
          gh pr create \
            --title "Firewall rule request from #${{ github.event.issue.number }}" \
            --body "This PR implements the firewall rule requested in issue #${{ github.event.issue.number }}." \
            --label "firewall-rule"

      - name: Mark workflow failed on validation error
        if: ${{ steps.validate.outcome == 'failure' }}
        run: exit 1
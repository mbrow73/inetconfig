name: ðŸ”„ Process Firewall Rule Update/Removal Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'firewall-update-request')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Process Firewall Rule Update/Removal Request
        shell: bash
        run: |
          set -e
          set -x

          # 1. Clean out any instructions between <!-- and -->
          ISSUE_BODY="${{ github.event.issue.body }}"
          ISSUE_BODY_CLEAN=$(echo "$ISSUE_BODY" | sed '/<!--/,/-->/d')

          echo "=== CLEANED ISSUE BODY ==="
          echo "$ISSUE_BODY_CLEAN"

          # 2. Parse out new REQID (where rule should end up after update)
          REQID=$(echo "$ISSUE_BODY_CLEAN" | grep -i "Request ID" | head -1 | cut -d: -f2- | xargs)
          CARID=$(echo "$ISSUE_BODY_CLEAN" | grep -i "CARID" | head -1 | cut -d: -f2- | xargs)
          echo "REQID: $REQID"
          echo "CARID: $CARID"
          if [ -z "$REQID" ]; then echo "REQID not found"; exit 1; fi
          if [ -z "$CARID" ]; then echo "CARID not found"; exit 1; fi

          # 3. Parse all rules (handle multiple blocks with delimiter)
          RULES=$(echo "$ISSUE_BODY_CLEAN" | awk '
            BEGIN{rule=0}
            /^#### Rule/{
              if(rule){
                print rule_block "\n@@@"
              }
              rule_block = ""
              rule=1
              next
            }
            {
              if(rule){
                rule_block = rule_block $0 "\n"
              }
            }
            END{
              if(rule){
                print rule_block
              }
            }
          ')
          echo "=== RULES PARSED ==="
          echo "$RULES"

          # 4. Parse update instructions to intermediate file
          cat > update_script.awk <<'EOS'
          BEGIN{FS=": ";OFS=": "; }
          function trim(s) {gsub(/^[ \t]+|[ \t]+$/, "", s); return s;}
          {
            if ($1 ~ /Existing Rule Name/) rulename=trim($2)
            else if ($1 ~ /Action/) action=trim($2)
            else if ($1 ~ /New Source/) src=trim($2)
            else if ($1 ~ /New Destination/) dst=trim($2)
            else if ($1 ~ /New Port/) ports=trim($2)
            else if ($1 ~ /New Protocol/) proto=trim($2)
            else if ($1 ~ /New Direction/) dir=trim($2)
            else if ($1 ~ /New Business Justification/) just=trim($2)
            else if ($1 ~ /#### Rule/) {
              if(rulename && action) {
                print rulename "|" action "|" src "|" dst "|" ports "|" proto "|" dir "|" just
              }
              rulename=action=src=dst=ports=proto=dir=just=""
            }
          }
          END{
            if(rulename && action) print rulename "|" action "|" src "|" dst "|" ports "|" proto "|" dir "|" just
          }
          EOS

          echo "$RULES" | awk -f update_script.awk > update_instructions.txt
          echo "=== UPDATE INSTRUCTIONS ==="
          cat update_instructions.txt

          # 5. For each rule, find the file, update/move/remove as needed
          shopt -s nullglob

          declare -A rule_to_file
          for f in firewall-requests/*.auto.tfvars.json; do
            while read -r rulename; do
              rule_to_file["$rulename"]="$f"
            done < <(jq -r '.auto_firewall_rules[].name' "$f")
          done

          # Make a temp dir for new files
          mkdir -p firewall-requests-updated
          cp firewall-requests/*.auto.tfvars.json firewall-requests-updated/ 2>/dev/null || true

          while IFS= read -r inst; do
            [ -z "$inst" ] && continue
            IFS='|' read -r existing_rulename action src dst ports proto dir just <<< "$inst"
            existing_rulename=$(echo "$existing_rulename" | xargs)
            action=$(echo "$action" | xargs)
            src=$(echo "$src" | xargs)
            dst=$(echo "$dst" | xargs)
            ports=$(echo "$ports" | xargs)
            proto=$(echo "$proto" | xargs)
            dir=$(echo "$dir" | xargs)
            just=$(echo "$just" | xargs)
            echo "---"
            echo "Processing: $existing_rulename | $action"

            # Find file containing this rule
            old_file="${rule_to_file[$existing_rulename]}"
            if [ -z "$old_file" ]; then
              echo "Rule $existing_rulename not found in any file, skipping"
              continue
            fi

            # Get current rule object and parse fields
            rule_obj=$(jq -c --arg name "$existing_rulename" '.auto_firewall_rules[] | select(.name==$name)' "$old_file")
            if [ -z "$rule_obj" ]; then
              echo "Rule object not found for $existing_rulename in $old_file"
              continue
            fi

            # Parse old reqid and carid from rule name (AUTO-REQ123123-445566-TCP-443-1)
            old_reqid=$(echo "$existing_rulename" | awk -F- '{print $2}')
            old_carid=$(echo "$existing_rulename" | awk -F- '{print $3}')

            # Remove from old file
            jq 'del(.auto_firewall_rules[] | select(.name == "'"$existing_rulename"'"))' "$old_file" > "$old_file.tmp"
            mv "$old_file.tmp" "$old_file"

            if [ "$action" = "remove" ]; then
              echo "Removed $existing_rulename from $old_file"
              continue
            fi

            # If update, possibly move to new file and change rule name
            new_rulename=$existing_rulename
            if [ "$REQID" != "$old_reqid" ]; then
              # Change rule name to use new REQID and current CARID (rest of naming preserved)
              new_rulename=$(echo "$existing_rulename" | sed "s/$old_reqid/$REQID/")
              new_file="firewall-requests-updated/${REQID}.auto.tfvars.json"
            else
              new_file="$old_file"
            fi

            # Build new rule object (update fields if provided)
            new_rule=$(echo "$rule_obj" | jq '.name = "'$new_rulename'"')
            [ -n "$src" ]  && new_rule=$(echo "$new_rule" | jq '.src_ip_ranges = ["'"$src"'"]')
            [ -n "$dst" ]  && new_rule=$(echo "$new_rule" | jq '.dest_ip_ranges = ["'"$dst"'"]')
            [ -n "$ports" ] && new_rule=$(echo "$new_rule" | jq '.ports = ["'"$ports"'"]')
            [ -n "$proto" ] && new_rule=$(echo "$new_rule" | jq '.protocol = "'"$proto"'"')
            [ -n "$dir" ]   && new_rule=$(echo "$new_rule" | jq '.direction = "'"$dir"'"')
            [ -n "$just" ]  && new_rule=$(echo "$new_rule" | jq '.description = "'"$just"'"')

            # Add updated rule to new file
            if [ ! -f "$new_file" ]; then
              echo '{"auto_firewall_rules": []}' > "$new_file"
            fi
            tmpfile=$(mktemp)
            jq --argjson rule "$new_rule" '.auto_firewall_rules += [$rule]' "$new_file" > "$tmpfile"
            mv "$tmpfile" "$new_file"

            echo "Updated rule written to $new_file as $new_rulename"

            # If moved to new file, update rule_to_file for next loop
            rule_to_file["$new_rulename"]="$new_file"

          done < update_instructions.txt

          # Copy everything back to working dir
          cp firewall-requests-updated/*.auto.tfvars.json firewall-requests/

          # Show diffs (for debugging/logging)
          echo "=== FILES AFTER ==="
          ls -l firewall-requests/*.auto.tfvars.json
          for f in firewall-requests/*.auto.tfvars.json; do
            echo "----- $f -----"
            cat "$f"
          done

          # Export for PR step if you want to use this downstream
          echo "REQID=$REQID" >> $GITHUB_ENV

      # (Optionally, add a step to commit+PR these changes, or trigger Terraform apply)
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     commit-message: "Update firewall rule(s) via GitHub Issue"
      #     branch: update/${{ env.REQID }}
      #     title: "Firewall rule change for ${{ env.REQID }}"
      #     body: "Automated update/removal of firewall rule(s) for request ${{ env.REQID }}."

name: 🔒 Process Firewall Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📝 Parse Issue, Generate Per-REQID JSON
        id: parse_and_write
        shell: bash
        run: |
          set -e

          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract REQID and CARID (value after the colon)
          REQID=$(echo "$ISSUE_BODY" | grep -i "Request ID" | head -1 | cut -d: -f2- | xargs)
          CARID=$(echo "$ISSUE_BODY" | grep -i "CARID" | head -1 | cut -d: -f2- | xargs)
          if [ -z "$REQID" ]; then echo "REQID not found"; exit 1; fi
          if [ -z "$CARID" ]; then echo "CARID not found"; exit 1; fi
          echo "REQID=$REQID" >> $GITHUB_OUTPUT

          # Extract rules (one block per #### Rule N section)
          RULES=$(echo "$ISSUE_BODY" | awk '
            BEGIN{rule=0}
            /^#### Rule/{
              if(rule){
                print rule_block "\n@@@"
              }
              rule_block = ""
              rule=1
              next
            }
            {
              if(rule){
                rule_block = rule_block $0 "\n"
              }
            }
            END{
              if(rule){
                print rule_block
              }
            }
          ')

          # Build JSON objects for each rule, trimming whitespace from all fields
          echo "$RULES" | awk -v carid="$CARID" -v reqid="$REQID" '
            BEGIN{RS="@@@"}
            NF{
              src=""; dst=""; ports=""; proto=""; dir=""; just="";
              n=split($0, lines, "\n");
              for(i=1;i<=n;i++){
                line=lines[i];
                if(line ~ /New Source/) {
                  src=line; sub(/.*: /,"",src); gsub(/^[ \t]+|[ \t]+$/,"",src)
                }
                if(line ~ /New Destination/) {
                  dst=line; sub(/.*: /,"",dst); gsub(/^[ \t]+|[ \t]+$/,"",dst)
                }
                if(line ~ /New Port/) {
                  ports=line; sub(/.*: /,"",ports); gsub(/^[ \t]+|[ \t]+$/,"",ports)
                }
                if(line ~ /New Protocol/) {
                  proto=line; sub(/.*: /,"",proto); gsub(/^[ \t]+|[ \t]+$/,"",proto)
                }
                if(line ~ /New Direction/) {
                  dir=line; sub(/.*: /,"",dir); gsub(/^[ \t]+|[ \t]+$/,"",dir)
                }
                if(line ~ /New Business Justification/) {
                  just=line; sub(/.*: /,"",just); gsub(/^[ \t]+|[ \t]+$/,"",just)
                }
              }
              printf("{\"name\": \"AUTO-%s-%s-%s-%s-%d\", \"description\": \"%s\", \"direction\": \"%s\", \"src_ip_ranges\": [\"%s\"], \"dest_ip_ranges\": [\"%s\"], \"ports\": [\"%s\"], \"protocol\": \"%s\", \"priority\": %d, \"action\": \"allow\", \"enable_logging\": true}\n",
                reqid, carid, toupper(proto), ports, NR, just, dir, src, dst, ports, tolower(proto), 1000+NR)
            }
          ' > rules.json

          RULES_JSON=$(paste -sd, rules.json)
          TFVARS="{\"auto_firewall_rules\": [${RULES_JSON}]}"
          mkdir -p firewall-requests
          echo "$TFVARS" | jq '.' > firewall-requests/${REQID}.auto.tfvars.json

      - name: ⏫ Create or Update Pull Request for NetSec
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: |
            [Firewall Automation] Update rules for ${{ steps.parse_and_write.outputs.REQID }}
          branch: firewall/${{ steps.parse_and_write.outputs.REQID }}-${{ github.event.issue.number }}
          title: "Firewall request: ${{ steps.parse_and_write.outputs.REQID }} (Issue #${{ github.event.issue.number }})"
          body: |
            Automated firewall rules for REQID `${{ steps.parse_and_write.outputs.REQID }}`.

            **Summary:**
            - Source: ${{ github.event.issue.user.login }}
            - Related Issue: #${{ github.event.issue.number }}

            **Rules:**  
            _See the file `firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json` for full details._

            > **NetSec:** Please review and merge if approved.  
          add-paths: |
            firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json
          base: main

      - name: 💬 Comment PR Link to Issue
        if: steps.cpr.outputs.pull-request-url != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `:robot: PR [#${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }}) opened/updated for NetSec review.`
            })
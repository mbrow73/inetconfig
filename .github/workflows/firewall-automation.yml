name: 🔒 Process Firewall Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔎 Validate Issue Format and Data
        id: validate
        shell: bash
        run: |
          echo "${{ github.event.issue.body }}" > issue.txt
          python3 .github/scripts/firewall_request_validator.py issue.txt > validation_output.txt || VALIDATION_FAILED=1
          if [[ "$VALIDATION_FAILED" == "1" ]]; then
            ERRORS=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' validation_output.txt \
                     | sed '/VALIDATION_ERRORS_START\|VALIDATION_ERRORS_END/d')
            gh issue comment ${{ github.event.issue.number }} --body $'### ❌ Firewall Request Validation Failed\n\n**Errors:**\n\n'"$(echo "$ERRORS" | sed 's/^/- /')"'\n\n_Your request was closed. Please correct the above and submit again._'
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Determine current max priority
        id: max_priority
        shell: bash
        run: |
          mkdir -p firewall-requests
          if compgen -G "firewall-requests/*.auto.tfvars.json" > /dev/null; then
            MAX=$(jq -s '[ .[].auto_firewall_rules[].priority ] | max' firewall-requests/*.auto.tfvars.json)
          else
            MAX=999
          fi
          echo "MAX_PRIORITY<<EOF" >> $GITHUB_OUTPUT
          echo "$MAX"           >> $GITHUB_OUTPUT
          echo "EOF"            >> $GITHUB_OUTPUT

      - name: 📝 Parse Issue, Generate Per-REQID JSON and Rule Summary
        id: parse_and_write
        shell: bash
        run: |
          set -e

          # strip all C0 controls (including CR, NUL, etc.) out of the issue body
          RAW_BODY="${{ github.event.issue.body }}"
          ISSUE_BODY="$(printf '%s' "$RAW_BODY" | tr -d $'\000-\037')"

          # Extract and sanitize REQID so it contains only [A-Za-z0-9_-]
          RAW_REQID=$(printf '%s' "$ISSUE_BODY" \
                    | grep -i "Request ID" | head -1 | cut -d: -f2-)
          REQID=$(printf '%s' "$RAW_REQID" | tr -d '[:space:]' | tr -cd '[:alnum:]\-_')
          echo "REQID=$REQID" >> $GITHUB_OUTPUT

          CARID=$(printf '%s' "$ISSUE_BODY" \
                   | grep -i "CARID"     | head -1 | cut -d: -f2- | xargs)
          echo "CARID=$CARID" >> $GITHUB_OUTPUT

          MAX_PRIORITY=${{ steps.max_priority.outputs.MAX_PRIORITY }}

          # split out each #### Rule block
          RULES=$(echo "$ISSUE_BODY" | awk '
            BEGIN{rule=0}
            /^#### Rule/{
              if(rule){ print rule_block "\n@@@" }
              rule_block=""; rule=1; next
            }
            rule{ rule_block = rule_block $0 "\n" }
            END{ if(rule) print rule_block }
          ')

          # build JSON + summary, trimming whitespace on each field
          echo "$RULES" | awk -v carid="$CARID" -v reqid="$REQID" -v maxp="$MAX_PRIORITY" '
            BEGIN { RS="@@@"; }
            NF {
              src=""; dst=""; ports=""; proto=""; dir=""; just="";
              n=split($0, lines, "\n");
              for(i=1;i<=n;i++){
                if(lines[i] ~ /New Source/) {
                  sub(/.*: /,"",lines[i]);
                  gsub(/^[ \t]+|[ \t]+$/,"",lines[i]);
                  src=lines[i];
                }
                if(lines[i] ~ /New Destination/) {
                  sub(/.*: /,"",lines[i]);
                  gsub(/^[ \t]+|[ \t]+$/,"",lines[i]);
                  dst=lines[i];
                }
                if(lines[i] ~ /New Port/) {
                  sub(/.*: /,"",lines[i]);
                  gsub(/^[ \t]+|[ \t]+$/,"",lines[i]);
                  ports=lines[i];
                }
                if(lines[i] ~ /New Protocol/) {
                  sub(/.*: /,"",lines[i]);
                  gsub(/^[ \t]+|[ \t]+$/,"",lines[i]);
                  proto=lines[i];
                }
                if(lines[i] ~ /New Direction/) {
                  sub(/.*: /,"",lines[i]);
                  gsub(/^[ \t]+|[ \t]+$/,"",lines[i]);
                  dir=lines[i];
                }
                if(lines[i] ~ /New Business Justification/) {
                  sub(/.*: /,"",lines[i]);
                  gsub(/^[ \t]+|[ \t]+$/,"",lines[i]);
                  just=lines[i];
                }
              }
              rulename = sprintf("AUTO-%s-%s-%s-%s-%d", reqid, carid, toupper(proto), ports, NR);
              desc     = rulename " | " just;
              printf("{\"name\":\"%s\",\"description\":\"%s\",\"direction\":\"%s\",\"src_ip_ranges\":[\"%s\"],\"dest_ip_ranges\":[\"%s\"],\"ports\":[\"%s\"],\"protocol\":\"%s\",\"priority\":%d,\"action\":\"allow\",\"enable_logging\":true}\n", \
                     rulename, desc, dir, src, dst, ports, tolower(proto), maxp+NR) >> "rules.json";
              rule_flow = sprintf("- **Rule %d:** %s → %s on %s/%s _(Direction: %s)_\n    Justification: %s\n", \
                                  NR, src, dst, tolower(proto), ports, dir, just);
              print rule_flow >> "rules_summary.txt";
            }
          '

          RULES_JSON=$(paste -sd, rules.json)
          TFVARS="{\"auto_firewall_rules\":[${RULES_JSON}]}"

          mkdir -p firewall-requests
          printf '%s' "$TFVARS" \
            | sed -e 's/[\x00-\x1F]//g' \
            | jq '.' \
            > firewall-requests/${REQID}.auto.tfvars.json

          SUMMARY=$(cat rules_summary.txt)
          echo "RULE_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY"       >> $GITHUB_OUTPUT
          echo "EOF"            >> $GITHUB_OUTPUT

      - name: ⏫ Create or Update Pull Request for NetSec
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: |
            [Firewall Automation] Update rules for ${{ steps.parse_and_write.outputs.REQID }}
          branch: firewall/${{ steps.parse_and_write.outputs.REQID }}-${{ github.event.issue.number }}
          title: "Firewall request: ${{ steps.parse_and_write.outputs.REQID }} (Issue #${{ github.event.issue.number }})"
          body: |
            **Rule Flow Summary:**
            ${{ steps.parse_and_write.outputs.RULE_SUMMARY }}

            **Summary:**
            - Source: ${{ github.event.issue.user.login }}
            - Related Issue: #${{ github.event.issue.number }}

            **Rules:**  
            _See the file `firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json` for full details._

            > **NetSec:** Please review and merge if approved.

            Closes #${{ github.event.issue.number }}
          add-paths: |
            firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json
          base: main

      - name: 💬 Comment PR Link to Issue
        if: steps.cpr.outputs.pull-request-url != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `:robot: PR [#${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }}) opened/updated for NetSec review.`
            })

name: 🔒 Process Firewall Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔎 Validate Issue Format and Data
        id: validate
        shell: bash
        run: |
          echo "${{ github.event.issue.body }}" > issue.txt
          python3 .github/scripts/firewall_request_validator.py issue.txt > validation_output.txt || VALIDATION_FAILED=1
          if [[ "$VALIDATION_FAILED" == "1" ]]; then
            ERRORS=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' validation_output.txt | sed '/VALIDATION_ERRORS_START\|VALIDATION_ERRORS_END/d')
            gh issue comment ${{ github.event.issue.number }} --body $'### ❌ Firewall Request Validation Failed\n\n**Errors:**\n\n'"$(echo "$ERRORS" | sed 's/^/- /')"'\n\n_Your request was closed. Please correct the above and submit again._'
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Parse Issue, Generate Per-REQID JSON and Rule Summary
        id: parse_and_write
        shell: bash
        run: |
          set -e

          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract REQID and CARID
          REQID=$(echo "$ISSUE_BODY" | grep -i "Request ID" | head -1 | cut -d: -f2- | xargs)
          CARID=$(echo "$ISSUE_BODY" | grep -i "CARID" | head -1 | cut -d: -f2- | xargs)
          if [ -z "$REQID" ]; then echo "REQID not found"; exit 1; fi
          if [ -z "$CARID" ]; then echo "CARID not found"; exit 1; fi
          echo "REQID=$REQID" >> $GITHUB_OUTPUT

          mkdir -p firewall-requests

          # Collect existing priorities from all request files
          EXISTING_PRIORITIES=""
          for file in firewall-requests/*.auto.tfvars.json; do
            if [ -f "$file" ]; then
              PRIO_LIST=$(jq -r '.auto_firewall_rules[].priority' "$file" 2>/dev/null || true)
              if [ -n "$PRIO_LIST" ]; then
                EXISTING_PRIORITIES+=$'\n'$PRIO_LIST
              fi
            fi
          done
          EXISTING_PRIORITIES=$(echo "$EXISTING_PRIORITIES" | grep -E '^[0-9]+$' | sort -n | uniq)
          echo "$EXISTING_PRIORITIES" > existing_priorities.txt

          # Extract rule definitions from the issue body
          RULES=$(echo "$ISSUE_BODY" | awk '
            BEGIN { rule=0 }
            /^#### Rule/ {
              if (rule) print rule_block "\n@@@"
              rule_block=""
              rule=1
              next
            }
            { if (rule) rule_block=rule_block $0 "\n" }
            END { if (rule) print rule_block }
          ')

          # Build JSON entries and summary, assigning unique priorities
          echo "$RULES" | awk -v carid="$CARID" -v reqid="$REQID" '
            BEGIN {
              RS="@@@"
              nextprio=1000
              while ((getline p < "existing_priorities.txt") > 0) used[p]=1
            }
            function get_next_priority() {
              while (used[nextprio]) nextprio++
              used[nextprio]=1
              return nextprio++
            }
            NF {
              # parse fields
              src=""; dst=""; ports=""; proto=""; dir=""; just="";
              n=split($0, lines, "\n");
              for (i=1; i<=n; i++) {
                line=lines[i]
                if (line ~ /New Source/) { sub(/.*: /, "", src=line) }
                if (line ~ /New Destination/) { sub(/.*: /, "", dst=line) }
                if (line ~ /New Port/) { sub(/.*: /, "", ports=line) }
                if (line ~ /New Protocol/) { sub(/.*: /, "", proto=line) }
                if (line ~ /New Direction/) { sub(/.*: /, "", dir=line) }
                if (line ~ /New Business Justification/) { sub(/.*: /, "", just=line) }
              }
              # trim whitespace
              gsub(/^ +| +$/,"",src); gsub(/^ +| +$/,"",dst);
              gsub(/^ +| +$/,"",ports); gsub(/^ +| +$/,"",proto);
              gsub(/^ +| +$/,"",dir); gsub(/^ +| +$/,"",just);

              # assign priority and output JSON
              prio=get_next_priority()
              name=sprintf("AUTO-%s-%s-%s-%s-%d", reqid, carid, toupper(proto), ports, NR)
              desc=name " | " just
              printf("{\"name\": \"%s\", \"description\": \"%s\", \"direction\": \"%s\", \"src_ip_ranges\": [\"%s\"], \"dest_ip_ranges\": [\"%s\"], \"ports\": [\"%s\"], \"protocol\": \"%s\", \"priority\": %d, \"action\": \"allow\", \"enable_logging\": true}\n", name, desc, dir, src, dst, ports, tolower(proto), prio) >> rules.json

              # summary for PR
              printf("- **Rule %d:** %s → %s on %s/%s _(Direction: %s)_\n    Justification: %s\n", NR, src, dst, tolower(proto), ports, dir, just) >> rules_summary.txt
            }
          '

          # write the tfvars file
          RULES_JSON=$(paste -sd, rules.json)
          echo "{\"auto_firewall_rules\": [${RULES_JSON}]}" | jq . > firewall-requests/${REQID}.auto.tfvars.json

          # output summary
          echo "RULE_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          cat rules_summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ⏫ Create or Update Pull Request for NetSec
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: |
            [Firewall Automation] Update rules for ${{ steps.parse_and_write.outputs.REQID }}
          branch: firewall/${{ steps.parse_and_write.outputs.REQID }}-${{ github.event.issue.number }}
          title: "Firewall request: ${{ steps.parse_and_write.outputs.REQID }} (Issue #${{ github.event.issue.number }})"
          body: |
            **Rule Flow Summary:**
            ${{ steps.parse_and_write.outputs.RULE_SUMMARY }}

            **Summary:**
            - Source: ${{ github.event.issue.user.login }}
            - Related Issue: #${{ github.event.issue.number }}

            **Rules:**
            _See `firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json` for full details._

            > **NetSec:** Please review and merge if approved.

            Closes #${{ github.event.issue.number }}

          add-paths: |
            firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json
          base: main

      - name: 💬 Comment PR Link to Issue
        if: steps.cpr.outputs.pull-request-url != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `:robot: PR [#${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }}) opened/updated for NetSec review.`
            })

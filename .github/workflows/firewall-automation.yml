name: 🔒 Process Firewall Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔎 Validate Issue Format and Data
        id: validate
        shell: bash
        run: |
          echo "${{ github.event.issue.body }}" > issue.txt
          python3 .github/scripts/firewall_request_validator.py issue.txt > validation_output.txt || VALIDATION_FAILED=1
          if [[ "$VALIDATION_FAILED" == "1" ]]; then
            ERRORS=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' validation_output.txt | sed '/VALIDATION_ERRORS_START\|VALIDATION_ERRORS_END/d')
            gh issue comment ${{ github.event.issue.number }} --body $'### ❌ Firewall Request Validation Failed\n\n**Errors:**\n\n'"$(echo "$ERRORS" | sed 's/^/- /')"'\n\n_Your request was closed. Please correct the above and submit again._'
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Parse Issue, Generate Per-REQID JSON and Rule Summary
        id: parse_and_write
        shell: bash
        run: |
          set -e

          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract REQID and CARID
          REQID=$(echo "$ISSUE_BODY" | grep -i "Request ID" | head -1 | cut -d: -f2- | xargs)
          CARID=$(echo "$ISSUE_BODY" | grep -i "CARID" | head -1 | cut -d: -f2- | xargs)
          [ -z "$REQID" ] && { echo "REQID not found"; exit 1; }
          [ -z "$CARID" ] && { echo "CARID not found"; exit 1; }
          echo "REQID=$REQID" >> $GITHUB_OUTPUT

          mkdir -p firewall-requests

          # Gather existing priorities
          EXISTING_PRIORITIES=()
          for file in firewall-requests/*.auto.tfvars.json; do
            [ -f "$file" ] || continue
            mapfile -t PRIO_LIST < <(jq -r '.auto_firewall_rules[].priority' "$file" 2>/dev/null)
            for p in "${PRIO_LIST[@]}"; do
              [[ $p =~ ^[0-9]+$ ]] && EXISTING_PRIORITIES+=($p)
            done
          done
          # remove duplicates and sort
          EXISTING_PRIORITIES=($(printf "%s\n" "${EXISTING_PRIORITIES[@]}" | sort -nu))
          declare -A used=()
          for p in "${EXISTING_PRIORITIES[@]}"; do used[$p]=1; done
          nextprio=1000

          # Split out rules by block
          BLOCKS=()
          IFS=$'\n@@@\n' read -r -d '' -a BLOCKS <<< "$(echo "$ISSUE_BODY" | awk '
            BEGIN { rule=0 }
            /^#### Rule/ { if(rule) print rule_block "\n@@@"; rule_block=""; rule=1; next }
            { if(rule) rule_block=rule_block \$0 "\n" }
            END { if(rule) print rule_block }
          ' )"

          > rules.json
          > rules_summary.txt
          idx=0

          for block in "${BLOCKS[@]}"; do
            # skip empty
            if [[ -z "\$(echo "\$block" | tr -d '[:space:]')" ]]; then continue; fi
            idx=\$((idx+1))
            # parse each field
            src=\$(echo "\$block" | grep -i 'New Source' | cut -d: -f2- | xargs)
            dst=\$(echo "\$block" | grep -i 'New Destination' | cut -d: -f2- | xargs)
            ports=\$(echo "\$block" | grep -i 'New Port' | cut -d: -f2- | xargs)
            proto=\$(echo "\$block" | grep -i 'New Protocol' | cut -d: -f2- | xargs)
            dir=\$(echo "\$block" | grep -i 'New Direction' | cut -d: -f2- | xargs)
            just=\$(echo "\$block" | grep -i 'New Business Justification' | cut -d: -f2- | xargs)

            # assign next free priority
            while [[ \${used[\$nextprio]} ]]; do nextprio=\$((nextprio+1)); done
            prio=\$nextprio; used[\$prio]=1; nextprio=\$((nextprio+1))

            # build names and JSON
            name="AUTO-\${REQID}-\${CARID}-\${proto^^}-\${ports}-\${idx}"
            desc="\${name} | \${just}"
            jq -n \
              --arg name "\$name" \
              --arg desc "\$desc" \
              --arg dir "\$dir" \
              --arg src "\$src" \
              --arg dst "\$dst" \
              --arg ports "\$ports" \
              --arg proto "\${proto,,}" \
              --argjson prio \$prio \
              '{name: \$name, description: \$desc, direction: \$dir, src_ip_ranges:[\$src], dest_ip_ranges:[\$dst], ports:[\$ports], protocol:\$proto, priority:\$prio, action:"allow", enable_logging:true}' \
              >> rules.json

            # append summary
            printf "- **Rule %d:** %s → %s on %s/%s _(Direction: %s)_\n    Justification: %s\n" \
              \$idx "\$src" "\$dst" "\${proto,,}" "\$ports" "\$dir" "\$just" >> rules_summary.txt
          done

          # write tfvars
          RULES_JSON=\$(paste -sd, rules.json)
          echo "{\"auto_firewall_rules\": [\${RULES_JSON}]}" | jq . > firewall-requests/\${REQID}.auto.tfvars.json

          # set output summary
          echo "RULE_SUMMARY<<EOF" >> \$GITHUB_OUTPUT
          cat rules_summary.txt >> \$GITHUB_OUTPUT
          echo "EOF" >> \$GITHUB_OUTPUT

      - name: ⏫ Create or Update Pull Request for NetSec
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: |
            [Firewall Automation] Update rules for ${{ steps.parse_and_write.outputs.REQID }}
          branch: firewall/${{ steps.parse_and_write.outputs.REQID }}-${{ github.event.issue.number }}
          title: "Firewall request: ${{ steps.parse_and_write.outputs.REQID }} (Issue #${{ github.event.issue.number }})"
          body: |
            **Rule Flow Summary:**
            ${{ steps.parse_and_write.outputs.RULE_SUMMARY }}

            **Summary:**
            - Source: ${{ github.event.issue.user.login }}
            - Related Issue: #${{ github.event.issue.number }}

            **Rules:**
            _See `firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json` for full details._

            > **NetSec:** Please review and merge if approved.

            Closes #${{ github.event.issue.number }}

          add-paths: |
            firewall-requests/${{ steps.parse_and_write.outputs.REQID }}.auto.tfvars.json
          base: main

      - name: 💬 Comment PR Link to Issue
        if: steps.cpr.outputs.pull-request-url != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `:robot: PR [#${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }}) opened/updated for NetSec review.`
            })
